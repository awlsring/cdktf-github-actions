import { writeFileSync } from 'fs';
import * as YAML from 'yaml';

/**
 * Options for `YamlFile`
 */
export interface YamlFileOptions {
  /**
   * The object that will be serialized. You can modify the object's contents
   * before synthesis.
   *
   * @default {} an empty object
   */
  readonly obj?: any;
}

export class YamlFile {
  /**
   * The path to the file that the object will be written to.
   */
  private readonly filePath: string;

  /**
    * The output object. This object can be mutated until the project is synthesized.
    */
  private obj: object;

  /**
   * A comment to be added to the top of the YAML file.
   *
   * Can be multiline. All non-empty line are pefixed with '# '. Empty lines are kept, but not
  */
  public commentAtTop?: string;

  constructor(filePath: string, options: YamlFileOptions = {}) {
    this.filePath = filePath;
    this.obj = options.obj ?? {};

    // default value for commentAtTop
    this.commentAtTop = `AUTOMATICALLY GENERATED FILE, DO NOT EDIT MANUALLY.
Generated by @awlsring/cdktf-github-actions.`;
  }

  /**
   * Update the output object.
   */
  public update(obj: any) {
    this.obj = obj;
  }

  /**
   * Returns the patched yaml file.
   */
  public toYaml(): string {
    const obj = JSON.parse(JSON.stringify(this.obj));

    const yamlDoc = new YAML.Document(obj);
    yamlDoc.commentBefore = this.commentAtTop ?? null;

    return yamlDoc.toString({
      commentString: (comment) =>
        comment.split('\n').map((x) => x == '' ? '' : `# ${x}`).join('\n'),
      indent: 2,
    });
  }

  /**
   * Write the patched yaml file to the specified location.
   */
  public writeFile() {
    writeFileSync(this.filePath, this.toYaml());
  }
}